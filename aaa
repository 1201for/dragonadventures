repeat task.wait() until game:IsLoaded()
local G = getgenv and getgenv() or _G or shared
for i,v in next, game:GetChildren() do
    G[v.ClassName] = v
end

G.Player = Players.LocalPlayer
G.Kick = Player.Kick
G.Idled = Player.Idled
G.Error = ScriptContext.Error
G.MessageOut = LogService.MessageOut
local A = {Idled, Error, MessageOut}
for i,v in next, A do
    for i,v in next, getconnections(v) do
        v:Disable()
    end
end

local Old = ReplicatedStorage.funs:GetChildren()

local OldNameCall = nil
OldNameCall = hookmetamethod(game, "__namecall", function(...)
    local Self, Key = ...
    if table.find(Old, Self) and getnamecallmethod() == "InvokeServer" then
        return
    end
    if Self == Player and getnamecallmethod() == "Destroy" then
        return
    end
    if Self == Player and (getnamecallmethod() == "Kick" or getnamecallmethod() == "kick") then
        return
    end
    if type(Self) == "Instance" then
        return OldNameCall(...)
    end
    return OldNameCall(...)
end)

local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local StarterGui = game:GetService("StarterGui")
local Workspace = game:GetService("Workspace")
local VirtualUser = game
local HttpService = game:GetService("HttpService")
local CoreGui = game:GetService("CoreGui")
local TeleportService = game:GetService("TeleportService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")
local TweenService = game:GetService("TweenService")
local wait = task.wait 
local spawn = task.spawn
local Config = {
    WindowName = "V.G Hub",
	Color = Color3.fromRGB(255,128,64),
	Keybind = Enum.KeyCode.RightControl
}

repeat
    wait()
until game:IsLoaded()
wait()
for i,v in pairs(getconnections(Player.Idled)) do
    v:Disable()
end 
CoreGui.RobloxPromptGui.promptOverlay.DescendantAdded:Connect(
    function()
        if CoreGui.RobloxPromptGui.promptOverlay:FindFirstChild("ErrorPrompt") then
            wait(25)
            TeleportService:Teleport(game.PlaceId, Player)
        end
    end
)

local function Tween(A, B, C)
    if A and B then
        local Time = (B.Position - A.Position).magnitude/C
        local Info = TweenInfo.new(Time, Enum.EasingStyle.Linear)
        local Tween = TweenService:Create(A,Info,{CFrame = B})
        Tween:Play()
    end
end 
game.StarterGui:SetCore(
    "SendNotification",
    {
        Title = "Loading Settings",
        Text = "This will take three seconds"
    }
)
local System = Instance.new("BindableFunction")

function System.OnInvoke(v)
    if v == "No" then
        game:ShutDown()
    end
end

StarterGui:SetCore(
    "SendNotification",
    {
        Title = "Warning",
        Text = "Warning this game contains immense amounts of mental stress, anxiety, idiotic behaviors, bugs, retards, etc are you sure you want to continue?",
        Duration = 5,
        Callback = bindable,
        Button1 = "Yes",
        Button2 = "No"
    }
)

repeat
    wait()
until  Workspace.npc["you are one rude person"]:FindFirstChildWhichIsA("Folder")

if not Workspace.npc:FindFirstChild("npcs") then
    wait(1)
    TeleportService:Teleport(game.PlaceId, Player)
end
repeat
    wait()
until Player
Player.PlayerGui:WaitForChild("Chat")

Player.PlayerGui.Chat.Frame.ChatChannelParentFrame.Visible = true
Player.PlayerGui.Chat.Frame.ChatBarParentFrame.Position =
    Player.PlayerGui.Chat.Frame.ChatChannelParentFrame.Position +
    UDim2.new(UDim.new(), Player.PlayerGui.Chat.Frame.ChatChannelParentFrame.Size.Y)

local Name = "DemonSlayerBurningAshes.json"

Des = {}
if makefolder then
    makefolder("V.G Hub")
end

local Settings

if
    not pcall(
        function()
            readfile("V.G Hub//" .. Name)
        end
    )
 then
    writefile("V.G Hub//" .. Name, HttpService:JSONEncode(Des))
end

Settings = HttpService:JSONDecode(readfile("V.G Hub//" .. Name))

local function Save()
    writefile("V.G Hub//" .. Name, HttpService:JSONEncode(Settings))
end

RunService.Stepped:connect(
    function()
        Workspace.FallenPartsDestroyHeight = 0 / 0
        sethiddenproperty(game.Players.LocalPlayer, "SimulationRadius", 1000)
    end
)


local function LoadMap()
    
    for i, v in pairs(ReplicatedStorage.Areas:GetChildren()) do
        if v:IsA("BasePart") then
            Player.Character.HumanoidRootPart.Position = Vector3.new(v.Position) wait(0.5)
        end
    end
end

Mobs = {"Demon Slayer", "Strong Demon Slayer", "Demon", "Strong Demon", "Fast Demon", "Mukago"}

local String = Workspace.npc.npcs

local Strong = Workspace.npc["you are one rude person"]
for i, v in pairs(Strong:GetChildren()) do
    if not v:FindFirstChildWhichIsA("Folder") then
        v.Name = ""
        v:Destroy()
    elseif v.Name ~= "" then
        v.Name = "Mobs"
        v:FindFirstChildWhichIsA("Folder").Name = "Mobs"
    end
end
if Workspace:FindFirstChild("chatnpcs") then
    for i, v in pairs(Workspace.chatnpcs.Quest:GetChildren()) do
        if v:IsA("Model") then
            pcall(
                function()
                    v.Parent = Workspace.chatnpcs
                end
            )
        end
    end
end
local Shit = Vector3.new(math.random(100),-50,math.random(100))

local function getNearestMob() 
    local TargetDistance = math.huge
    local Target
    for i, v in ipairs(String:GetChildren()) do
        if
            v.Name == Settings.Mobs and v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") and
                v:FindFirstChildWhichIsA("Humanoid").Health ~= 0 
         then
            local Mag = (Shit - v.PrimaryPart.Position).Magnitude

            if
                Mag < TargetDistance 
             then
                TargetDistance = Mag
                Target = v
            end
        end
    end
    return Target
end

local Number = math.random(1, 500)

Areas = {}
for i, v in pairs(ReplicatedStorage.Areas:GetChildren()) do
    if v:IsA("BasePart") then
        table.insert(Areas, v.Name)
    end
end
if Workspace:FindFirstChild("chatnpcs") then
    Que = {}
    for i, v in pairs(Workspace.chatnpcs:GetChildren()) do
        if
            v:FindFirstChild("Chat") and v.Chat:FindFirstChild("Start") and v.Chat.Start:FindFirstChild("b") and
                v.Chat.Start.b:FindFirstChild("Quest") and
                not table.find(Que, v.Chat.Start.b.Quest.Value)
         then
            table.insert(Que, v.Chat.Start.b.Quest.Value)
        end
    end
    Areas = {}
    for i, v in pairs(ReplicatedStorage.Areas:GetChildren()) do
        if v:IsA("BasePart") then
            table.insert(Areas, v.Name)
        end
    end

    Breathings1 = {}
    for i, v in pairs(Workspace.chatnpcs.breath:GetChildren()) do
        if v:IsA("Model") then
            table.insert(Breathings1, v.Name)
        end
    end
    NPCS = {}
    for i, v in pairs(Workspace.chatnpcs:GetChildren()) do
        if v:IsA("Model") then
            table.insert(NPCS, v.Name)
        end
    end
end

local function Esp(v)
    if v:WaitForChild("Humanoid") then
        v:WaitForChild("Humanoid").HealthDisplayDistance = 100
        v:WaitForChild("Humanoid").HealthDisplayType = Enum.HumanoidHealthDisplayType.AlwaysOn
    end
end
spawn(
    function()
        while wait(5) do
            pcall(
                function()
                    for _, v in next, Players:GetPlayers() do
                        if v.Character ~= nil then
                            Esp(v.Character)
                        end
                    end
                    for i, v in pairs(String:GetChildren()) do
                        if v:IsA("Model") and v:FindFirstChild("Humanoid") then
                            Esp(v)
                        end
                    end
                end
            )
        end
    end
)


local function CheckMate() wait(0.1)
    if not Player.Character:FindFirstChildWhichIsA("ForceField") then
        if Player.Backpack:FindFirstChild("Katana") then
            Player.Character:WaitForChild("Humanoid"):EquipTool(Player.Backpack:WaitForChild("Katana"))
        end
        if not Player.states:FindFirstChild("exeing") then
            game:GetService("VirtualInputManager"):SendKeyEvent(true, "B", false, game)
        end
        if not Player.states:FindFirstChild("selfstun") then
            game:GetService("VirtualInputManager"):SendKeyEvent(true, "R", false, game)
        end
        VirtualUser:ClickButton1(Vector2.new(0, 300))
        ReplicatedStorage.events.remote:FireServer("NormalAttack")
    end
end

local function Use() 
    for i, v in pairs(Player.Backpack:GetChildren()) do
        if
            v:IsA("Tool") and v:FindFirstChild("Move") and not v:FindFirstChild("Cash") and
                not Player.cds:FindFirstChild(v.Name)
         then
            wait()
            if Player.NoSaveValue.Air.Value <= 100 then
                ReplicatedStorage.events.remote:FireServer(v.Name)
            end
        end
    end
end

local function Start(v)
    print(v)
end

if not Workspace:FindFirstChild("First") then
    local Part = Instance.new("Part", Workspace)
    Part.Name = "First"
    Part.Anchored = true
    Part.Size = Vector3.new(9e9, 1, 9e9)
    Part.Transparency = 1
    Part.Massless = true
    Part.CFrame = CFrame.new(Shit) * CFrame.new(0,-5,0)
end

local Gourd = {"Small Gourd", "Medium Gourd", "Big Gourd"}


local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/1201for/V.G-Hub/main/test"))()
local Window = Library:CreateWindow(Config, game:GetService("CoreGui"))

local Tab1 = Window:CreateTab("Demon Slayer-Burning Ashes")
local Tab2 = Window:CreateTab("UI Settings")

local Section1 = Tab1:CreateSection("")
local Section2 = Tab1:CreateSection("")
local Section3 = Tab2:CreateSection("Menu")
local Section4 = Tab2:CreateSection("Background")


if not Workspace:FindFirstChild("chatnpcs") then
local Toggle1 = Section1:CreateToggle("Auto Final Selection", Settings.AutoFinalSelection, function(State)
Settings.AutoFinalSelection = State

RunService.Stepped:connect(
    function()
        if Settings.AutoFinalSelection then
            Player.Character:WaitForChild("Humanoid"):ChangeState(11)
        end
    end
)

spawn(
    function()
        while wait() and Settings.AutoFinalSelection do
            pcall(
                function()
                    repeat
                        wait()
                        if Settings.AutoFinalSelection == false then
                            break
                        end
                        if not Player.Character:FindFirstChildWhichIsA("ForceField") then
                            if getNearestMobFinalSeclection().Humanoid.Health > 10 then
                                
                                Tween(Player.Character:WaitForChild("HumanoidRootPart"),
                                    getNearestMobFinalSeclection().HumanoidRootPart.CFrame * CFrame.new(0, -7, 0) *
                                    CFrame.Angles(90, 0, 0),150)
                            end

                            if getNearestMobFinalSeclection().Humanoid.Health < 10 then
                                Tween(Player.Character:WaitForChild("HumanoidRootPart"),
                                    getNearestMobFinalSeclection().HumanoidRootPart.CFrame * CFrame.new(0, 0, 0) *
                                    CFrame.Angles(0, 0, 0),150)
                            end
                        end
                    until Settings.AutoFinalSelection == false or getNearestMobFinalSeclection().Humanoid.Health == 0
                    if getNearestMobFinalSeclection().Humanoid.Health == 0 then
                        getNearestMobFinalSeclection():remove()
                    end
                end
            )
        end
    end
)


spawn(
    function()
        while wait() and Settings.AutoFinalSelection do
            wait(0.2)
            pcall(
                function()
                    CheckMate()
                    Use()
                    if isnetworkowner then
                    for i,v in pairs(String:GetChildren()) do 
                    if v:IsA("Model") and v:FindFirstChildWhichIsA("Humanoid") and isnetworkowner(v.HumanoidRootPart) then
                    v.HumanoidRootPart.Anchored = true
                    elseif not isnetworkowner(v.HumanoidRootPart) then
                    v.HumanoidRootPart.Anchored = false 
                    end end end 
                end
            )
        end
    end
)

end)
end
local Toggle1 = Section1:CreateToggle("NoFallDamage", Settings.NOFALL, function(State)
    Settings.NOFALL = State
local OldNameCall = nil
OldNameCall =
    hookmetamethod(
    game,
    "__namecall",
    function(self, ...)
        local Args = {...}
        if Args[1] == "FallDamage" and Settings.NOFALL then
            return nil
        end
        return OldNameCall(self, unpack(Args))
    end
)
end)

local Toggle1 = Section1:CreateToggle("Semi HideName", Settings.HideName, function(State)
Settings.HideName = State
RunService.Stepped:connect(
    function()
        if Settings.HideName then
            pcall(function()
            ReplicatedStorage.DashWithNoDelay:InvokeServer("Dash")
            Workspace.EFFECT:Destroy()
            end)
        end
    end
)
end)

local Toggle1 = Section1:CreateToggle("Auto Attack", Settings.Attack, function(State)
Settings.Attack = State
spawn(
    function()
        while Settings.Attack do
            wait()
            Use()
            ReplicatedStorage.events.remote:FireServer("NormalAttack")
        end
    end
)

end)

local Toggle1 = Section1:CreateToggle("Auto Gourd", Settings.Gourds, function(State)
Settings.Gourds = State
spawn(function()
while Settings.Gourds do
    wait()
    pcall(
        function()
            if Player.NoSaveValue.Air.Value == 100 then
                if not Player.Character:FindFirstChild(Settings.Gourd) then
                Player.Character.Humanoid:EquipTool(
                    Player.Backpack:FindFirstChild(Settings.Gourd)
                )
                end
                ReplicatedStorage.events.remote:FireServer(Settings.Gourd)
            end
        end
    )
end
end) 
end)


local Dropdown1 = Section1:CreateDropdown("Gourds", Gourd, function(String)
	Settings.Gourd = String
end)

local Toggle1 = Section1:CreateToggle("Player Silent Aim", Settings.PlayerSilentAim, function(State)
Settings.PlayerSilentAim = State

local Players = Players
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
function ClosestPlayerToCurser()
    local MaxDistance, Closest = math.huge
    for i, v in pairs(Players.GetPlayers(Players)) do
        if v ~= LocalPlayer and v.Character then
            local H = v.Character.FindFirstChild(v.Character, "Head")
            if H then
                local Pos, Vis = workspace.CurrentCamera.WorldToScreenPoint(workspace.CurrentCamera, H.Position)
                if Vis then
                    local A1, A2 = Vector2.new(Mouse.X, Mouse.Y), Vector2.new(Pos.X, Pos.Y)
                    local Dist = (A2 - A1).Magnitude
                    if Dist < MaxDistance and Dist <= math.huge then
                        MaxDistance = Dist
                        Closest = v
                    end
                end
            end
        end
    end
    return Closest
end


local OldIndex = nil
OldIndex =
    hookmetamethod(
    game,
    "__index",
    function(self, v, ...)
        if self == Mouse and (v == "Hit" or v == "Target") then
            if ClosestPlayerToCurser() and Settings.PlayerSilentAim then 
                return ((v == "Hit" and ((ClosestPlayerToCurser().Character.Head.CFrame) or (ClosestPlayerToCurser().Character.Head.CFrame + (ClosestPlayerToCurser().Character.Head.Velocity)))) or
                    (v == "Target" and ClosestPlayerToCurser().Character.Head))
            end
        end

        return OldIndex(self, v)
    end
)
end)
local Toggle1 = Section1:CreateToggle("Mob Silent Aim", Settings.MobSilentAim, function(State)

Settings.MobSilentAim = State
local Players = Players
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
function ClosestMobToCurser()
    local MaxDistance, Closest = math.huge
    for i, v in pairs(String:GetChildren()) do
        if v:IsA("Model")  then
            local H = v:FindFirstChild("Head")
            if H then
                local Pos, Vis = workspace.CurrentCamera:WorldToScreenPoint(H.Position)
                if Vis then
                    local A1, A2 = Vector2.new(Mouse.X, Mouse.Y), Vector2.new(Pos.X, Pos.Y)
                    local Dist = (A2 - A1).Magnitude
                    if Dist < MaxDistance and Dist <= math.huge then
                        MaxDistance = Dist
                        Closest = v
                    end
                end
            end
        end
    end
    return Closest
end



local OldIndex = nil
OldIndex =
    hookmetamethod(
    game,
    "__index",
    function(self, v, ...)
        if self == Mouse and (v == "Hit" or v == "Target") then
            if ClosestMobToCurser() and Settings.MobSilentAim then 
                return ((v == "Hit" and ((ClosestMobToCurser().Head.CFrame) or (ClosestMobToCurser().Head.CFrame + (ClosestMobToCurser().Head.Velocity)))) or
                    (v == "Target" and ClosestMobToCurser().Head))
            end
        end

        return OldIndex(self, v)
    end
)
end)

local Toggle1 = Section1:CreateToggle("Auto Steal MoneyBags", Settings.Type, function(State)
Settings.Type = State
RunService.Stepped:connect(
    function()
        pcall(
            function()
                for i, v in pairs(Workspace:GetChildren()) do
                    if v.Name == "MoneyBag" and v:IsA("BasePart") and Settings.Type then
                        firetouchinterest(Player.Character.HumanoidRootPart, v, 0)
                    end
                end
            end
        )
    end
)
end)

local Toggle1 = Section1:CreateToggle("Auto Load Map", Settings.LoadMap, function(State)
Settings.LoadMap = State
spawn(
    function()
        if Settings.LoadMap then
        LoadMap()
        end
    end
)

end)

local Toggle1 = Section1:CreateToggle("Full Bright", Settings.FullBright, function(State)
Settings.FullBright = State
        if Settings.FullBright then wait()
            Lighting.FogEnd = 9e9
            Lighting.Ambient = Color3.new(1, 1, 1)
            Lighting.ColorShift_Bottom = Color3.new(1, 1, 1)
            Lighting.ColorShift_Top = Color3.new(1, 1, 1)
        else
            Lighting.Ambient = Color3.new(0, 0, 0)
            Lighting.ColorShift_Bottom = Color3.new(0, 0, 0)
            Lighting.ColorShift_Top = Color3.new(0, 0, 0)
        end
Lighting.Changed:connect(
    function()
        if Settings.FullBright then wait()
            Lighting.FogEnd = 9e9
            Lighting.Ambient = Color3.new(1, 1, 1)
            Lighting.ColorShift_Bottom = Color3.new(1, 1, 1)
            Lighting.ColorShift_Top = Color3.new(1, 1, 1)
        else
            Lighting.Ambient = Color3.new(0, 0, 0)
            Lighting.ColorShift_Bottom = Color3.new(0, 0, 0)
            Lighting.ColorShift_Top = Color3.new(0, 0, 0)
        end
    end)
end)

if game.PlaceId == 2483973525 and game.PlaceId ~=  4638327541 then


local Toggle1 = Section1:CreateToggle("AutoFarm Mobs", Settings.AutoFarmMobs, function(State)
Settings.AutoFarmMobs = State

RunService.Stepped:connect(
    function()
        if Settings.AutoFarmMobs then
            Player.Character:WaitForChild("Humanoid"):ChangeState(11)
        end
    end
)
spawn(
    function()
        while wait() and Settings.AutoFarmMobs do
            pcall(
                function()
                    if Player.Character:FindFirstChildWhichIsA("ForceField") then
                        Player.Character:FindFirstChildWhichIsA("ForceField"):Destroy()
                    end
                    if getNearestMob().Humanoid.Health > 10 then
                        wait()
                        Tween(
                            Player.Character.HumanoidRootPart,
                            CFrame.new(getNearestMob().HumanoidRootPart.Position) * CFrame.new(0, -8, 0) *
                                CFrame.Angles(math.rad(90), 0, 0),
                            250
                        )
                    end

                    if getNearestMob().Humanoid.Health < 10 then
                        wait()
                        Tween(
                            Player.Character.HumanoidRootPart,
                            CFrame.new(getNearestMob().HumanoidRootPart.Position) * CFrame.new(0, 0, 0) *
                                CFrame.Angles(math.rad(90), 0, 0),
                            250
                        )
                    end
                end
            )
        end
    end
)

spawn(
    function()
        while wait() and Settings.AutoFarmMobs do
            wait(0.2)
            pcall(
                function()
                    CheckMate()
                    Use()
                end
            )
        end
    end
)


end)

if isnetworkowner then
local Toggle1 = Section1:CreateToggle("AutoFarm Mobs Safely", Settings.AutoFarmSafely, function(State)
Settings.AutoFarmSafely = State

RunService.Stepped:connect(
    function()
        if Settings.AutoFarmSafely then
            pcall(
                function()
                    CheckMate()
                    Player.Character:WaitForChild("Humanoid"):ChangeState(11)
                    getNearestMob():WaitForChild("Humanoid"):ChangeState(11)
                    
                end
            )
        end
    end
)

spawn(
    function()
        while wait(Settings.Delay) and Settings.AutoFarmSafely do
            pcall(
                function()
                    if Player.Character:FindFirstChildWhichIsA("ForceField") then
                        Player.Character:FindFirstChildWhichIsA("ForceField"):Destroy()
                    end
                    CheckMate()
                    repeat
                        wait()
                        Tween(
                            Player.Character.HumanoidRootPart,
                            getNearestMob():GetModelCFrame() * CFrame.new(0, -8, 0) *
                                CFrame.Angles(math.rad(90), 0, 0),
                            200
                        )
                    until isnetworkowner(getNearestMob():FindFirstChild("HumanoidRootPart")) or
                        not Settings.AutoFarmSafely
                    if isnetworkowner(getNearestMob().HumanoidRootPart) then
                            getNearestMob().HumanoidRootPart.CFrame = CFrame.new(Shit)
                    end
                    repeat
                        wait()
                        if (getNearestMob().HumanoidRootPart.Position - Shit).Magnitude < 9e9 and wait() then
                            Tween(
                                Player.Character.HumanoidRootPart,
                                CFrame.new(getNearestMob():GetModelCFrame().Position) * CFrame.new(0, -8, 0) *
                                    CFrame.Angles(math.rad(90), 0, 0),
                                250
                            )
                        end
                    until getNearestMob().Humanoid.Health == 0 or not isnetworkowner(getNearestMob().HumanoidRootPart)
                   
                end
            )
        end
    end
)

end)
local Slider1 = Section1:CreateSlider("AutoFarm Delay",0,7,Settings.Delay,false, function(Value)
	Settings.Delay = Value
end)




end

local Dropdown1 = Section1:CreateDropdown("Mobs", Mobs, function(String)
	Settings.Mobs = String
end)


if Workspace:FindFirstChild("chatnpcs") then
local Toggle1 = Section1:CreateToggle("Auto Accept Quest", Settings.AutoQuest, function(State)
Settings.AutoQuest = State
RunService.Stepped:connect(
    function()
        if Settings.AutoQuest then
            Player.Character:WaitForChild("Humanoid"):ChangeState(11)
        end
    end
)
spawn(
    function()
        while Settings.AutoQuest do
            wait()
            if
                not Player.PlayerGui:FindFirstChild("dialogGUI") and
                    not Player.PlayerGui:FindFirstChild("Quest")
             then
                for i, v in pairs(Workspace.chatnpcs:GetChildren()) do
            if v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Chat") and v.Chat:FindFirstChild("Start") and v.Chat.Start:FindFirstChild("b") and 
            v.Chat.Start.b:FindFirstChild("Quest")  and
                            v:WaitForChild("Chat"):WaitForChild("Start"):WaitForChild("b"):WaitForChild("Quest").Value == Settings.Quest
                     then
                         repeat wait()
                             Player.Character:MoveTo(v.HumanoidRootPart.Position)
                         Tween(Player.Character.HumanoidRootPart,v.HumanoidRootPart.CFrame * CFrame.new(0,-8,0) * CFrame.Angles(math.rad(90),0,0),200)
                        fireproximityprompt(v.ProximityPrompt)
                        until (Player.Character.HumanoidRootPart.Position - v.HumanoidRootPart.Position).Magnitude < 10
                    end
                end
            end 
            if Player.PlayerGui:FindFirstChild("dialogGUI") then
                VirtualUser:ClickButton1(Vector2.new(900, 900))
                for i, v in pairs(Player.PlayerGui.dialogGUI.f.sf:GetChildren()) do
                    if v:IsA("UIGridLayout") then
                        v.CellSize = UDim2.new(500, 500, -500, -500)
                    end
                    wait(0.1)
                    if v.Name == "button" then
                        v:remove()
                    end
                end
            end
        end
    end
)


end)


local Dropdown1 = Section1:CreateDropdown("Quests", Que, function(String)
	Settings.Quest = String
end)
end 

local Toggle1 = Section1:CreateToggle("RainBow Blade", Settings.RainBow, function(State)
Settings.RainBow = State
if Settings.RainBow then
game.StarterGui:SetCore("SendNotification", {
Title = "This is CS";
Text = "But Still Looks Cool";
})
end 
RunService.Stepped:connect(
    function()
        if Player.Character:FindFirstChild("Weapon") and Settings.RainBow then
            for i, v in pairs(Player.Character.Weapon:GetChildren()) do
                if v:IsA("BasePart") then
                    v.Color = Color3.fromHSV(tick() % 5 / 5, 1, 1)
                end
            end
        end
    end
)
end)

local Toggle1 = Section1:CreateToggle("Transparent Blade", Settings.Transparents, function(State)
Settings.Transparents = State
RunService.Stepped:connect(
    function()
        if Player.Character:FindFirstChild("Weapon") and Settings.Transparents then
            for i, v in pairs(Player.Character.Weapon:GetChildren()) do
                if v:IsA("BasePart") then
                    v.Transparency = Settings.Transparency 
                end
            end
        end
    end
)
end)
local Slider1 = Section1:CreateSlider("Blade Transparency",0,1,Settings.Transparency,false, function(Value)
	Settings.Transparency = Value
end)

local Toggle1 = Section1:CreateToggle("RainBow Skin", Settings.RainBowMan, function(State)
Settings.RainBowMan = State
if Settings.RainBowMan then
game.StarterGui:SetCore("SendNotification", {
Title = "This is CS";
Text = "But Still Looks Cool";
})
end 
RunService.Stepped:connect(
    function()
        if 
        Settings.RainBowMan then
            for i, v in pairs(Player.Character:GetChildren()) do
                if v:IsA("BasePart") then
                    pcall(function()
                    v.Color = Color3.fromHSV(tick() % 5 / 5, 1, 1)
                    end)
                end
            end
        end
    end
)
end)

local Toggle1 = Section1:CreateToggle("Transparent Person", Settings.TransparentsMan, function(State)
Settings.TransparentsMan = State
RunService.Stepped:connect(
    function()
        if Settings.TransparentsMan then
            for i, v in pairs(Player.Character:GetChildren()) do
                if v:IsA("BasePart") and v.Name ~= "HumanoidRootPart" then
                    pcall(function()
                    v.Transparency = Settings.Transparency1
                    end)
                end
            end
        end
    end
)
end)
local Slider1 = Section1:CreateSlider("Person Transparency",0,1,Settings.Transparency1,false, function(Value)
	Settings.Transparency1 = Value
end)

local Toggle1 = Section1:CreateToggle("Auto Eat", Settings.Eat, function(State)
Settings.Eat = State
spawn(
    function()
        while Settings.Eat do
            pcall(function()
            wait()
            repeat
                wait()
                if math.floor(Player.CharStats.Hunger.Value) <= 50 then
                    for i, v in pairs(Player.Backpack:GetChildren()) do
                        if v:IsA("Tool") and v:FindFirstChild("NameChange") then
                            Player.Character.Humanoid:EquipTool(v)
                            VirtualUser:ClickButton1(Vector2.new())
                        end
                    end
                end
            until math.floor(Player.CharStats.Hunger.Value) == 100
            end)
        end
    end
)

end)

local Toggle1 = Section1:CreateToggle("Hard Reset/LifeSaver", Settings.Reset, function(State)
Settings.Reset = State
RunService.Stepped:connect(
    function()
        if Player.Character:WaitForChild("Humanoid").Health <= 10 and Settings.Reset then
            pcall(
                function()
                    Player.Character:WaitForChild("Head"):Destroy()
                end
            )
        end
    end
)
end)



local Toggle1 = Section1:CreateToggle("Auto Crimson Red Nichirin Blade", Settings.Crimson, function(State)
Settings.Crimson = State
spawn(function()
while Settings.Crimson do
    wait(2)
    ReplicatedStorage.events.remote:FireServer("Crimson Red Nichirin Blade")
end
end)
end)


local Toggle1 = Section1:CreateToggle("Auto Buy Food", Settings.Food, function(State)
Settings.Food = State
RunService.Stepped:connect(
    function()
        if Settings.Food then
            Player.Character:WaitForChild("Humanoid"):ChangeState(11)
        end
    end
)
spawn(function()
while wait() and Settings.Food do
    pcall(
        function()
            Player.Character.HumanoidRootPart.CFrame =
                Workspace.Store.Onigiri.CFrame * CFrame.new(0, -26, 0)
            fireclickdetector(Workspace.Store.Onigiri.ClickDetector)
            if Player.PlayerGui:FindFirstChild("dialogGUI") then
                VirtualUser:ClickButton1(Vector2.new())
                for i, v in pairs(Player.PlayerGui.dialogGUI.f.sf:GetChildren()) do
                    if v:IsA("UIGridLayout") then
                        v.CellSize = UDim2.new(500, 500, -500, -500)
                    end
                    if v.Name == "button" then
                        v:remove()
                    end
                end
            end
        end
    )
end
end)
end)



if isnetworkowner then
local Toggle1 = Section1:CreateToggle("Anchored Mob Aura", Settings.Anchored, function(State)
Settings.Anchored = State
spawn(function()
while wait(2) and Settings.Anchored do
    pcall(
        function()
            for i, v in pairs(String:GetChildren()) do
                if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") and isnetworkowner(v.PrimaryPart)  then
                    v.HumanoidRootPart.Anchored = true
                elseif v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") and not isnetworkowner(v.PrimaryPart)  then
                    v.HumanoidRootPart.Anchored = false
                end
            end
        end
    )
end
end)
end)

local Toggle1 = Section1:CreateToggle("Jump Mob Aura", Settings.Jump, function(State)
Settings.Jump = State
spawn(function()
while wait(2) and Settings.Jump do
    pcall(
        function()
            for i, v in pairs(String:GetChildren()) do
                if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") and isnetworkowner(v.PrimaryPart)  then
                    v.Humanoid.Jump = true
                elseif v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") and not isnetworkowner(v.PrimaryPart)  then
                    v.Humanoid.Jump = false
                end
            end
        end
    )
end
end)
end)

local Toggle1 = Section1:CreateToggle("Stun Mob Aura", Settings.Stun, function(State)
Settings.Stun = State
spawn(function()
while wait(2) and Settings.Stun do
    pcall(
        function()
            for i, v in pairs(String:GetChildren()) do
                if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") and isnetworkowner(v.PrimaryPart)  then
                    v.Humanoid.PlatformStand = true
                elseif v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") and not isnetworkowner(v.PrimaryPart)   then
                    v.Humanoid.PlatformStand = false
                end
            end
        end
    )
end
end)
end)
end 
local Toggle1 = Section1:CreateToggle("Night Hop", Settings.NightHop, function(State)
Settings.NightHop = State
spawn(
    function()
        while wait(4) and Settings.NightHop do
            wait(nil)
            pcall(
                function()
                    if not Workspace.GameState:FindFirstChild("Night") then
                        local PlaceID = game.PlaceId
                        local AllIDs = {}
                        local foundAnything = ""
                        local actualHour = os.date("!*t").hour
                        local Deleted = false
                        local File =
                            pcall(
                            function()
                                AllIDs = game:GetService("HttpService"):JSONDecode(readfile("NotSameServers.json"))
                            end
                        )
                        if not File then
                            table.insert(AllIDs, actualHour)
                            writefile("NotSameServers.json", game:GetService("HttpService"):JSONEncode(AllIDs))
                        end
                        function TPReturner()
                            local Site
                            if foundAnything == "" then
                                Site =
                                    game.HttpService:JSONDecode(
                                    game:HttpGet(
                                        "https://games.roblox.com/v1/games/" ..
                                            PlaceID .. "/servers/Public?sortOrder=Asc&limit=100"
                                    )
                                )
                            else
                                Site =
                                    game.HttpService:JSONDecode(
                                    game:HttpGet(
                                        "https://games.roblox.com/v1/games/" ..
                                            PlaceID ..
                                                "/servers/Public?sortOrder=Asc&limit=100&cursor=" .. foundAnything
                                    )
                                )
                            end
                            local ID = ""
                            if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
                                foundAnything = Site.nextPageCursor
                            end
                            local num = 0
                            for i, v in pairs(Site.data) do
                                local Possible = true
                                ID = tostring(v.id)
                                if tonumber(v.maxPlayers) > tonumber(v.playing) then
                                    for _, Existing in pairs(AllIDs) do
                                        if num ~= 0 then
                                            if ID == tostring(Existing) then
                                                Possible = false
                                            end
                                        else
                                            if tonumber(actualHour) ~= tonumber(Existing) then
                                                local delFile =
                                                    pcall(
                                                    function()
                                                        delfile("NotSameServers.json")
                                                        AllIDs = {}
                                                        table.insert(AllIDs, actualHour)
                                                    end
                                                )
                                            end
                                        end
                                        num = num + 1
                                    end
                                    if Possible == true then
                                        table.insert(AllIDs, ID)
                                        wait()
                                        pcall(
                                            function()
                                                writefile(
                                                    "NotSameServers.json",
                                                    game:GetService("HttpService"):JSONEncode(AllIDs)
                                                )
                                                wait()
                                                TeleportService:TeleportToPlaceInstance(
                                                    PlaceID,
                                                    ID,
                                                    Player
                                                )
                                            end
                                        )
                                        wait(4)
                                    end
                                end
                            end
                        end

                        function Teleport()
                            while wait() do
                                pcall(
                                    function()
                                        TPReturner()
                                        if foundAnything ~= "" then
                                            TPReturner()
                                        end
                                    end
                                )
                            end
                        end

                        -- If you'd like to use a script before server hopping (Like a Automatic Chest collector you can put the Teleport() after it collected everything.
                        Teleport()
                    end
                end
            )
        end
    end
)
end)
local Toggle1 = Section1:CreateToggle("Infinite Breath", Settings.InfiniteBreath, function(State)
Settings.InfiniteBreath = State
spawn(
    function()
        while Settings.InfiniteBreath do
            wait()
            ReplicatedStorage.events.remote:FireServer("manacharges")
            wait(3)
            ReplicatedStorage.events.remote:FireServer("manacharged")
        end
    end
)
end)


local Toggle1 = Section2:CreateToggle("Enable WalkSpeed/JumpPower", Settings.Go, function(State)
Settings.Go = State
RunService.Stepped:connect(
    function()
        if Settings.Go then
            Player.Character:WaitForChild("Humanoid").WalkSpeed = Settings.WalkSpeed
            Player.Character:WaitForChild("Humanoid").JumpPower = Settings.JumpPower
            if not game:GetService("UserInputService").WindowFocusReleased then
                setfpscap(Settings.Fps)
            end
        end
    end
)

end)

local TextBox1 = Section2:CreateTextBox("Fps Cap", "Only numbers", true, function(Value)
    Settings.Fps = Value
end)

local TextBox1 = Section2:CreateTextBox("WalkSpeed", "Only numbers", true, function(Value)
    Settings.WalkSpeed = Value
end)
local TextBox1 = Section2:CreateTextBox("JumpPower", "Only numbers", true, function(Value)
    Settings.JumpPower = Value
end)

local TextBox1 = Section2:CreateTextBox("Yen Amount", "Only numbers", true, function(Value)
    Settings.YenAmount = Value
end)
local Toggle1 = Section2:CreateToggle("Drop Yen", Settings.DropYen, function(State)
Settings.DropYen = State
spawn(
    function()
        while Settings.DropYen do
            wait()
            ReplicatedStorage.events.remote:FireServer("Drop Yen", tonumber(Settings.YenAmount))
        end
    end
)
end)

local Button1 = Section2:CreateButton("Teleport To Area", function()
    Tween(Player.Character.HumanoidRootPart,ReplicatedStorage.Areas[Areas].CFrame,150)
end)

local Dropdown1 = Section2:CreateDropdown("Areas", Areas, function(String)
	Areas = String
end)

if Workspace:FindFirstChild("chatnpcs") then
local Button1 = Section2:CreateButton("Teleport To Breathing Teacher", function()
    Tween(Player.Character.HumanoidRootPart,Workspace.chatnpcs.breath[Breathings1].HumanoidRootPart.CFrame,150)
end)

local Dropdown1 = Section2:CreateDropdown("Breathing Teachers", Breathings1, function(String)
	Breathings1 = String
end)

local Button1 = Section2:CreateButton("Teleport To NPC", function()
    Tween(Player.Character.HumanoidRootPart, Workspace.chatnpcs[NPCS].HumanoidRootPart.CFrame,150)
end)

local Dropdown1 = Section2:CreateDropdown("NPCS", NPCS, function(String)
	NPCS = String
end)
end



local Toggle1 = Section2:CreateToggle("Infinite Jump", Settings.InfiniteJump, function(State)
Settings.InfiniteJump = State
game:GetService("UserInputService").JumpRequest:connect(
    function()
        if Settings.InfiniteJump then
            game:GetService "Players".LocalPlayer.Character:FindFirstChildWhichIsA "Humanoid":ChangeState("Jumping")
        end
    end
)
end)

local ESP = loadstring(game:HttpGet("https://raw.githubusercontent.com/1201for/V.G-Hub/main/Karrot-Esp"))()





local Toggle1 = Section1:CreateToggle("Enable Esp", Settings.Esp, function(State)
    Settings.Esp = State
    ESP:Toggle(Settings.Esp)
    
end)
if Workspace.map:FindFirstChild("Stuff") then

end 

local Button1 = Section2:CreateButton("Press For Hentai", function()

game.StarterGui:SetCore(
    "SendNotification",
    {
        Title = "BAHAHAHAHA",
        Text = "DuMbAsS rEtArD"
    }
)


end)
local Toggle1 = Section1:CreateToggle("PLayer Esp", Settings.PlayerEsp, function(State)
    Settings.PlayerEsp = State
    ESP.Players = Settings.PlayerEsp
end)
local Toggle1 = Section1:CreateToggle("Tracers Esp", Settings.Tracers, function(State)
    Settings.Tracers = State
    ESP.Tracers = Settings.Tracers
end)
local Toggle1 = Section1:CreateToggle("Name Esp", Settings.EspNames, function(State)
    ESP.Names = Settings.EspNames
    Settings.EspNames = State
end)
local Toggle1 = Section1:CreateToggle("Boxes Esp", Settings.Boxes, function(State)
    Settings.Boxes = State
    ESP.Boxes = Settings.Boxes
end)

end 

local Toggle1 = Section2:CreateToggle("Invisicam", Settings.Sorry, function(State)
Settings.Sorry = State
if Settings.Sorry then
    Player.DevCameraOcclusionMode = "Invisicam"
else
    Player.DevCameraOcclusionMode = "Zoom"
end
end)
local Toggle1 = Section2:CreateToggle("Be Wired", Settings.Weird, function(State)
Settings.Weird = State
spawn(
    function()
        while Settings.Weird do
            wait()
            pcall(
                function()
                    Player.Character["Left Leg"]:remove()
                    Player.Character["Left Arm"]:remove()
                    Player.Character["Right Arm"]:remove()
                    Player.Character["Right Leg"]:remove()
                end
            )
        end
    end
)
end)

local Toggle1 = Section2:CreateToggle("N Noclip", Settings.Sex1, function(State)
noclips = false
Settings.Sex1 = State
Player:GetMouse().KeyDown:connect(
    function(v)
        if v == "n" then
            if Settings.Sex1 then
                noclips = not noclips
                for i, v in pairs(Player.Character:GetChildren()) do
                    if v:IsA("BasePart") then
                        v.CanCollide = false
                    end
                end
            end
        end
    end
)
RunService.Stepped:connect(
    function()
        if noclips then
            for i, v in pairs(Player.Character:GetChildren()) do
                if v:IsA("BasePart") then
                    v.CanCollide = false
                end
            end
        end
    end
)

end)

local Toggle1 = Section2:CreateToggle("G Noclip", Settings.Sex, function(State)
Settings.Sex = State
noclip = false
RunService.Stepped:connect(
    function()
        if noclip then
            Player.Character.Humanoid:ChangeState(11)
        end
    end
)
mouse = Player:GetMouse()
Player:GetMouse().KeyDown:connect(
    function(v)
        if v == "g" then
            if Settings.Sex then
                noclip = not noclip
                Player.Character.Humanoid:ChangeState(11)
            end
        end
    end
)
end)
local Toggle1 = Section2:CreateToggle("H Fly", Settings.Sex2, function(State)
Settings.Sex2 = State
local Max = 0
local Players = Players
local LP = Players.LocalPlayer
local Mouse = LP:GetMouse()
Mouse.KeyDown:connect(
    function(k)
        if k:lower() == "h" then
            Max = Max + 1
            getgenv().Fly = false
            if Settings.Sex2 then
                local T = LP.Character.Torso
                local S = {
                    F = 0,
                    B = 0,
                    L = 0,
                    R = 0
                }
                local S2 = {
                    F = 0,
                    B = 0,
                    L = 0,
                    R = 0
                }
                local SPEED = 5
                local function FLY()
                    getgenv().Fly = true
                    local BodyGyro = Instance.new("BodyGyro", T)
                    local BodyVelocity = Instance.new("BodyVelocity", T)
                    BodyGyro.P = 9e4
                    BodyGyro.maxTorque = Vector3.new(9e9, 9e9, 9e9)
                    BodyGyro.cframe = T.CFrame
                    BodyVelocity.velocity = Vector3.new(0, 0.1, 0)
                    BodyVelocity.maxForce = Vector3.new(9e9, 9e9, 9e9)
                    spawn(
                        function()
                            repeat
                                wait()
                                LP.Character.Humanoid.PlatformStand = false
                                if S.L + S.R ~= 0 or S.F + S.B ~= 0 then
                                    SPEED = 200
                                elseif not (S.L + S.R ~= 0 or S.F + S.B ~= 0) and SPEED ~= 0 then
                                    SPEED = 0
                                end
                                if (S.L + S.R) ~= 0 or (S.F + S.B) ~= 0 then
                                    BodyVelocity.velocity =
                                        ((Workspace.CurrentCamera.CoordinateFrame.lookVector * (S.F + S.B)) +
                                        ((Workspace.CurrentCamera.CoordinateFrame *
                                            CFrame.new(S.L + S.R, (S.F + S.B) * 0.2, 0).p) -
                                            Workspace.CurrentCamera.CoordinateFrame.p)) *
                                        SPEED
                                    S2 = {
                                        F = S.F,
                                        B = S.B,
                                        L = S.L,
                                        R = S.R
                                    }
                                elseif (S.L + S.R) == 0 and (S.F + S.B) == 0 and SPEED ~= 0 then
                                    BodyVelocity.velocity =
                                        ((Workspace.CurrentCamera.CoordinateFrame.lookVector * (S2.F + S2.B)) +
                                        ((Workspace.CurrentCamera.CoordinateFrame *
                                            CFrame.new(S2.L + S2.R, (S2.F + S2.B) * 0.2, 0).p) -
                                            Workspace.CurrentCamera.CoordinateFrame.p)) *
                                        SPEED
                                else
                                    BodyVelocity.velocity = Vector3.new(0, 0.1, 0)
                                end
                                BodyGyro.cframe = Workspace.CurrentCamera.CoordinateFrame
                            until not getgenv().Fly
                            S = {
                                F = 0,
                                B = 0,
                                L = 0,
                                R = 0
                            }
                            S2 = {
                                F = 0,
                                B = 0,
                                L = 0,
                                R = 0
                            }
                            SPEED = 0
                            BodyGyro:destroy()
                            BodyVelocity:destroy()
                            LP.Character.Humanoid.PlatformStand = false
                        end
                    )
                end
                Mouse.KeyDown:connect(
                    function(k)
                        if k:lower() == "w" then
                            S.F = 1
                        elseif k:lower() == "s" then
                            S.B = -1
                        elseif k:lower() == "a" then
                            S.L = -1
                        elseif k:lower() == "d" then
                            S.R = 1
                        end
                    end
                )
                Mouse.KeyUp:connect(
                    function(k)
                        if k:lower() == "w" then
                            S.F = 0
                        elseif k:lower() == "s" then
                            S.B = 0
                        elseif k:lower() == "a" then
                            S.L = 0
                        elseif k:lower() == "d" then
                            S.R = 0
                        end
                    end
                )
                FLY()
                if Max == 2 then
                    getgenv().Fly = false
                    Max = 0
                end
            end
        end
    end
)
end)
local Button1 = Section2:CreateButton("Anti Lag", function()
for _, v in pairs(Workspace:GetDescendants()) do
    if v:IsA("BasePart") and not v.Parent:FindFirstChild("Humanoid") then
        v.Material = Enum.Material.SmoothPlastic
        if v:IsA("Texture") then
            v:Destroy()
        end
    end
end
end)

local Button1 = Section2:CreateButton("Teleport to RandomPlayer", function()
local randomPlayer = Players:GetPlayers()[math.random(1, #Players:GetPlayers())]

Player.Character.HumanoidRootPart.CFrame =
    CFrame.new(
    Vector3.new(
        randomPlayer.Character.Head.Position.X,
        randomPlayer.Character.Head.Position.Y,
        randomPlayer.Character.Head.Position.Z
    )
)
end)
local Button1 = Section2:CreateButton("Lag Switch F3", function()
local ass = false
local bitch = settings()

game:service "UserInputService".InputEnded:connect(
    function(i)
        if i.KeyCode == Enum.KeyCode.F3 then
            ass = not ass
            bitch.Network.IncomingReplicationLag = ass and 10 or 0
        end
    end
)
 end) 
local Button1 = Section2:CreateButton("ServerHop", function()
local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false
local File = pcall(function()
    AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
end)
if not File then
    table.insert(AllIDs, actualHour)
    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
end
function TPReturner()
    local Site;
    if foundAnything == "" then
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
    else
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
    end
    local ID = ""
    if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
        foundAnything = Site.nextPageCursor
    end
    local num = 0;
    for i,v in pairs(Site.data) do
        local Possible = true
        ID = tostring(v.id)
        if tonumber(v.maxPlayers) > tonumber(v.playing) then
            for _,Existing in pairs(AllIDs) do
                if num ~= 0 then
                    if ID == tostring(Existing) then
                        Possible = false
                    end
                else
                    if tonumber(actualHour) ~= tonumber(Existing) then
                        local delFile = pcall(function()
                            delfile("NotSameServers.json")
                            AllIDs = {}
                            table.insert(AllIDs, actualHour)
                        end)
                    end
                end
                num = num + 1
            end
            if Possible == true then
                table.insert(AllIDs, ID)
                wait()
                pcall(function()
                    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                    wait()
                    TeleportService:TeleportToPlaceInstance(PlaceID, ID, Player)
                end)
                wait(4)
            end
        end
    end
end

function Teleport()
    while wait() do
        pcall(function()
            TPReturner()
            if foundAnything ~= "" then
                TPReturner()
            end
        end)
    end
end

-- If you'd like to use a script before server hopping (Like a Automatic Chest collector you can put the Teleport() after it collected everything.
Teleport() 
end)
local Button1 = Section2:CreateButton("Rejoin", function()
TeleportService:Teleport(game.PlaceId, Player) end)





local Toggle3 = Section3:CreateToggle("UI Toggle", nil, function(State)
	Window:Toggle(State)
end)
Toggle3:CreateKeybind(tostring(Config.Keybind):gsub("Enum.KeyCode.", ""), function(Key)
	Config.Keybind = Enum.KeyCode[Key]
end)
Toggle3:SetState(true)
Section3:CreateLabel("Credits DekuDimz#7960")
Section3:CreateLabel("Credits AlexR32#3232 Ui")
Section3:CreateLabel("Credits The3Bakers")
Section3:CreateLabel("Credits E621")
local Colorpicker3 = Section3:CreateColorpicker("UI Color", function(Color)
	Window:ChangeColor(Color)
end)
Colorpicker3:UpdateColor(Config.Color)

-- credits to jan for patterns
local Dropdown3 = Section4:CreateDropdown("Image", {"Default","Hearts","Abstract","Hexagon","Circles","Lace With Flowers","Floral"}, function(Name)
	if Name == "Default" then
		Window:SetBackground("2151741365")
	elseif Name == "Hearts" then
		Window:SetBackground("6073763717")
	elseif Name == "Abstract" then
		Window:SetBackground("6073743871")
	elseif Name == "Hexagon" then
		Window:SetBackground("6073628839")
	elseif Name == "Circles" then
		Window:SetBackground("6071579801")
	elseif Name == "Lace With Flowers" then
		Window:SetBackground("6071575925")
	elseif Name == "Floral" then
		Window:SetBackground("5553946656")
	end
end)
Dropdown3:SetOption("Default")

local Colorpicker4 = Section4:CreateColorpicker("Color", function(Color)
	Window:SetBackgroundColor(Color)
end)
Colorpicker4:UpdateColor(Color3.new(1,1,1))

local Slider3 = Section4:CreateSlider("Transparency",0,1,nil,false, function(Value)
	Window:SetBackgroundTransparency(Value)
end)
Slider3:SetValue(0)

local Slider4 = Section4:CreateSlider("Tile Scale",0,1,nil,false, function(Value)
	Window:SetTileScale(Value)
end)
Slider4:SetValue(0.5)


spawn(
    function()
        while wait(30) do
            pcall(
                function()
                    Save()
                end
            )
        end
    end
)
