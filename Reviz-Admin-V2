
repeat wait() until game:IsLoaded()
local G = getgenv and getgenv() or _G or shared

for i,v in next, game.GetChildren(game) do
    G[v.ClassName] = v
end
G.Player = Players.LocalPlayer
G.wait = task.wait
G.spawn = task.spawn
G.Heartbeat = RunService.Heartbeat
G.Stepped = RunService.Stepped
G.RenderStepped = RunService.RenderStepped
G.Error = ScriptContext.Error
G.MessageOut = LogService.MessageOut
G.Kick = Player.Kick
G.Idled = Player.Idled
G.User = Instance.new("VirtualInputManager")

for i,v in next, getconnections(Error) do
    v:Disable()
end
for i,v in next, getconnections(Idled) do
    v:Disable()
end

local Bruh = 0
if not Text and Toggy.Status then
   getgenv().Text = Drawing.new("Text")
   Text.Color = Color3.new(0, 1, 1)
   Text.Font = 1
   Text.Outline = true
   Text.OutlineColor = Color3.new(0, 0, 0)
   Text.Position = Vector2.new(0,0)
   Text.Size = 25
   Text.Text = "Test"
   Text.Visible = true
end

if Toggy.Toggled and Toggy.Status then
    local X,Y= Workspace.CurrentCamera.ViewportSize.Y, Text.Position.Y
    Text.Position = Vector2.new(Workspace.CurrentCamera.ViewportSize.X / X + 50 , Y - 50)
elseif not Toggy.Toggled and Toggy.Status then
    Text.Text = ""
end 

local Locations = Workspace.Environment.Locations
local JobHandler = Player.PlayerScripts.Modules.JobHandler
local Stats = ReplicatedStorage.Stats[Player.Name]
local Randomtime = tostring(math.random(1,3)) .. "h " .. tostring(math.random(1,47)) .. "m"
local Data = require(game.ReplicatedStorage.Modules.DataService)
hookfunction(getfenv(require(game.ReplicatedStorage.Modules.DataService).FireServer).i, function()
    return;
end);
hookfunction(getfenv(require(game.ReplicatedStorage.Modules.DataService).InvokeServer).i, function()
    return;
end);
warn("Stopping At " .. Randomtime)

local Table = {
    Invoke = require(game.ReplicatedStorage.Modules.DataService).net.InvokeServer,
    Fire = require(game.ReplicatedStorage.Modules.DataService).net.FireServer
}

local Parts = function(Position)
    if not Workspace:FindFirstChild("Parts") then
        local Parts = Instance.new("Folder")
        Parts.Parent = Workspace
        Parts.Name = "Parts"
    end
    if Workspace.Parts then
        local Cube = Instance.new("Part")
        Cube.Name = "Cube"
        Cube.Parent = Workspace.Parts
        Cube.Transparency = 0
        Cube.BrickColor = BrickColor.random()
        Cube.Position = Position
        Cube.Anchored = true
        Cube.Size = Vector3.new(.1,.1,.1)
        Cube.CanCollide = false
    end
end
local DestroyParts = function()
    for i,v in next, Workspace.Parts:GetChildren() do
        if v:IsA("BasePart") then
            v:Destroy()
        end
    end
end
local Sorry = function(Part ,Position)
    if Part then
        local CFrame = CFrame.new(Part.Position, Position)
        local Args1, Args2, Args3, Args4, Args5, Args6, Args7, Args8, Args9, Args10, Args11, Args12 = CFrame:GetComponents()
        return Args4, Args5, Args6, Args7, Args8, Args9, Args10, Args11, Args12
    end
end

local Tween = function(Model, CFrame, Speed)
    for i=0, 1, Speed do wait()
        Model.PrimaryPart.CFrame = Model.PrimaryPart.CFrame:Lerp(CFrame, i)
    end
end

local Pathfind = function(Model,Position)
    local S = {WaypointSpacing = 3, Costs = {Grass = 300,  Mental = math.huge, Brick = math.huge, Ice = math.huge, SmoothPlastic = 300,  Water = 400}}
    local path = PathfindingService:CreatePath(S)
    path:ComputeAsync(Model.PrimaryPart.Position, Position)
    local WayPoints = path:GetWaypoints()
    for i,v in next, WayPoints do
        Parts(v.Position + Vector3.new(0, 7, 0))
    end
    for i, v in next, WayPoints do
        if path.Status == Enum.PathStatus.Success then
            Tween(Model, CFrame.new(v.Position.X, v.Position.Y + 2.5, v.Position.Z, Sorry(Model.PrimaryPart, v.Position + Vector3.new(0,2.5,0))), 0.25)
        end
    end
    wait(1)
    DestroyParts()
end
local Mag = function(Pos,v)
    local Nig = (v.Position - Pos.Position).Magnitude
    return Nig
end
UserInputService.WindowFocusReleased:Connect(function()
    if Toggy.LowRender then
        RunService:Set3dRenderingEnabled(false)
    end
end)
UserInputService.WindowFocused:Connect(function()
    if Toggy.LowRender then
        RunService:Set3dRenderingEnabled(true)
    end
end)

spawn(function()
    while wait() and Toggy.Toggled do
        pcall(function()
            if Player.PlayerGui.MainGUI.Bar.CharMenu.WorkFrame.WorkFrame.WorkInfoFrame.TimeLabel.TextLabel.Text:find(Randomtime) then Kick(Player, "Kicked at " .. Randomtime) end
            if Stats.Job.ShiftEarnings.Value >= Toggy.ShiftAmount then Kick("Kicked At" .. Toggy.ShiftAmount)  end
        end)
    end
end)

spawn(function()
    while wait() and Toggy.Toggled do
        pcall(function()
            if Bruh < Toggy.BreakTime then
                if Stats.Job.Value ~= "PizzaPlanetDelivery" then return require(JobHandler):GoToWork("PizzaPlanetDelivery") and require(JobHandler):StartShift("PizzaPlanetDelivery") end
                if not Player.Character:FindFirstChild("Vehicle_Delivery Moped", true) then
                    if Toggy.Status then
                        Text.Text = "Getting Mop"
                    end
                    Player.Character.HumanoidRootPart.CFrame = Locations:FindFirstChild("PizzaPlanet", true):FindFirstChild("DeliveryMoped", true):GetModelCFrame() * CFrame.new(0,5,0)
                    Workspace.CurrentCamera.CFrame = CFrame.lookAt(Workspace.CurrentCamera.CFrame.Position + Vector3.new(0,5,0), Locations:FindFirstChild("PizzaPlanet", true):FindFirstChild("DeliveryMoped", true):GetModelCFrame().Position)
                    User:SendKeyEvent(false, "E", false, game, 0)
                end
                local C = nil
                if Player.Character:FindFirstChild("Vehicle_Delivery Moped", true) then
                    repeat
                        if Toggy.Status then
                            Text.Text = "Getting Pizza " .. Bruh 
                        end
                        Pathfind(Player.Character:FindFirstChild("Vehicle_Delivery Moped", true), Vector3.new(1167, 14, 273))
                        if Mag(Player.Character:GetModelCFrame(), Locations:WaitForChild("PizzaPlanet"):WaitForChild("Conveyor"):WaitForChild("MovingBoxes"):FindFirstChildOfClass("UnionOperation")) < 25 and wait(1) then
                            C = Table:Invoke({Type = "TakePizzaBox", Box = Locations:WaitForChild("PizzaPlanet"):WaitForChild("Conveyor"):WaitForChild("MovingBoxes"):FindFirstChildOfClass("UnionOperation")})
                        end
                        wait(1)
                    until C ~= nil and C:FindFirstChild("HumanoidRootPart", true)
                    repeat wait()
                        if Toggy.Status then
                            Text.Text = "Getting Pizza to Customer"
                        end
                        Pathfind(Player.Character:FindFirstChild("Vehicle_Delivery Moped", true), C.HumanoidRootPart.Position + Vector3.new(0,0,0))
                        if Mag(C.HumanoidRootPart, Player.Character:GetModelCFrame()) < 5 and wait(1) then
                            Table:Fire({Type = "DeliverPizza", Customer = C})
                        end
                        wait(1)
                    until not Player.Character:FindFirstChild("Pizza Box", true)
                    Bruh = Bruh + 1
                end
            else
                for i=1, Toggy.SecondsToWait do
                    wait(1)
                    if Toggy.Status then
                        Text.Text = "Taking Break " .. i
                    end
                end
                Bruh = 0
            end
        end)
    end
end)
