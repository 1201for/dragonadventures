local Config = {
    WindowName = "V.G Hub",
    Color = Color3.fromRGB(255, 128, 64),
    Keybind = Enum.KeyCode.RightControl
}
repeat
    wait()
until game:IsLoaded()
wait()
local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")
local TweenService = game:GetService("TweenService")
local Workspace = game:GetService("Workspace")
local Debree = Workspace.Debree
local ReplicatedStorage = game:GetService("ReplicatedStorage")
if game.PlaceId == 6152116144 then
    local PlayerData = ReplicatedStorage.Player_Data:WaitForChild(Player.Name)
    local wait = task.wait
end
local Beast = require(ReplicatedStorage.Modules.Global["Map_Locaations"])
Player.Idled:connect(
    function()
        game:GetService("VirtualUser"):ClickButton2(Vector2.new())
    end
)

repeat
    wait()
until Player
Player.PlayerGui:WaitForChild("Chat")

Player.PlayerGui.Chat.Frame.ChatChannelParentFrame.Visible = true
Player.PlayerGui.Chat.Frame.ChatBarParentFrame.Position =
    Player.PlayerGui.Chat.Frame.ChatChannelParentFrame.Position +
    UDim2.new(UDim.new(), Player.PlayerGui.Chat.Frame.ChatChannelParentFrame.Size.Y)

for i, v in pairs(getconnections(Player.Idled)) do
    v:Disable()
end

RunService.Stepped:connect(
    function()
        sethiddenproperty(Player, "SimulationRadius", 1000)
    end
)

local Name = "Project Slayers.json"

Des = {}
if makefolder then
    makefolder("V.G Hub")
end

local Settings

if
    not pcall(
        function()
            readfile("V.G Hub//" .. Name)
        end
    )
 then
    writefile("V.G Hub//" .. Name, HttpService:JSONEncode(Des))
end
if readfile("V.G Hub//" .. Name) then
    Settings = HttpService:JSONDecode(readfile("V.G Hub//" .. Name))
end
local function Save()
    writefile("V.G Hub//" .. Name, HttpService:JSONEncode(Settings))
end
local Locations = {}
for i, v in pairs(Beast) do
    table.insert(Locations, i)
end

local Mobs = {}
for i, v in pairs(Workspace.Mobs:GetDescendants()) do
    if
        v:IsA("Model") and not table.find(Mobs, v.Name) and
            not (v.Name:find("Shoe") or v.Name:find("Pants") or v.Name:find("Shirt"))
     then
        table.insert(Mobs, v.Name)
    end
end
NPCS = {}
for i, v in pairs(Workspace:GetChildren()) do
    if
        v:FindFirstChildWhichIsA("Humanoid") and v:FindFirstChild("Body Colors") and
            not table.find(Players:GetPlayers(), v.Name) and
            not table.find(NPCS, v.Name)
     then
        table.insert(NPCS, v.Name)
    end
end
local Invis = function(Number)
    for i, v in pairs(Player.Character:GetDescendants()) do
        if v:IsA("BasePart") and v.Name ~= "HumanoidRootPart" then
            game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(
                "Change_Transparency",
                {{v, Number}}
            )
            v.Transparency = Number
        end
    end
end

local function Tween(A, B, C)
    if A then
        local Time = (B.Position - A.Position).magnitude / C
        local Info = TweenInfo.new(Time, Enum.EasingStyle.Linear)
        local Tween = game:GetService("TweenService"):Create(A, Info, {CFrame = B})
        Tween:Play()
    end
end

local function getNearestMob()
    local TargetDistance = math.huge
    local Target
    for i, v in pairs(game:GetService("Workspace").Mobs:GetChildren()) do
        for i, v in pairs(v:GetChildren()) do
            for i, v in pairs(v:GetChildren()) do
                for i, v in pairs(v:GetChildren()) do
                    if v:IsA("Model") and v.Name == Settings.Mob or Settings.Troll and v:IsA("Model") then
                        local Mag = (v:GetModelCFrame().Position - Player.Character.HumanoidRootPart.Position).Magnitude
                        if Mag < TargetDistance then
                            TargetDistance = Mag
                            Target = v
                        end
                    end
                end
            end
        end
    end
    return Target
end

local function getNearestMob1()
    local TargetDistance = math.huge
    local Target
    for i, v in pairs(game:GetService("Workspace").Mobs:GetChildren()) do
        for i, v in pairs(v:GetChildren()) do
            if v:IsA("Model") and v.Name:find(Settings.Mob) or Settings.Troll and v:IsA("Model") then
                local Mag = (v:GetModelCFrame().Position - Player.Character.HumanoidRootPart.Position).Magnitude
                if Mag < TargetDistance then
                    TargetDistance = Mag
                    Target = v
                end
            end
        end
    end
    return Target
end

local OldNameCall = nil
OldNameCall =
    hookmetamethod(
    game,
    "__namecall",
    function(self, ...)
        local Args = {...}
        if self.Name:find("Moddel") then
            return wait(math.huge)
        end
        return OldNameCall(self, ...)
    end
)

local function Click()
    wait(1.5)
    for i = 1, 5 do
        if
            ((getNearestMob():GetModelCFrame().Position - Player.Character.HumanoidRootPart.Position).Magnitude < 15 or
                (getNearestMob1():GetModelCFrame().Position - Player.Character.HumanoidRootPart.Position).Magnitude < 15 and
                    game.PlaceId == 10636616861)
         then
            ReplicatedStorage.Remotes.To_Server.Handle_Initiate_S_:InvokeServer(
                "fist_combat",
                Player,
                Player.Character,
                Player.Character.HumanoidRootPart,
                Player.Character.Humanoid,
                i
            )
        end
    end
end

if Settings.Distance == nil then
    Settings.Distance = 7
end

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/1201for/V.G-Hub/main/test"))()
local Window = Library:CreateWindow(Config, game:GetService("CoreGui"))

local Tab1 = Window:CreateTab("Project Slayers")
local Tab2 = Window:CreateTab("UI Settings")

local Section1 = Tab1:CreateSection("")
local Section2 = Tab1:CreateSection("")
local Section3 = Tab2:CreateSection("Menu")
local Section4 = Tab2:CreateSection("Background")


--[[
local Toggle1 = Section1:CreateToggle("AutoFarm Dungon", Settings.Dungon, function(State)
Settings.Dungon = State
if game.PlaceId == 10636616861 then
    RunService.Stepped:connect(
        function()
            pcall(
                function()
                    if Settings.Dungon then
                        Player.Character.Humanoid:ChangeState(11)
                        Tween(
                            Player.Character.HumanoidRootPart,
                            getNearestMob1().HumanoidRootPart.CFrame * CFrame.new(Vector3.new(0, -10, 0)) *
                                CFrame.Angles(90, 0, 0),
                            300
                        )
                        getNearestMob1().Humanoid.Health = 0
                    end
                end
            )
        end
    )

    Player.Character.Humanoid.Died:connect(
        function()
            game:GetService("TeleportService"):Teleport(6152116144, Player)
        end
    )
spawn(function()
    while wait(2) and Settings.Mobs do 
        pcall(function()
            Click()
        end)
    end 
end)
end
if game.PlaceId == 6152116144 then
    if Settings.Dungon then
        game:GetService("TeleportService"):Teleport(10636616861, Player)
    end
end

end)
]]--
local Toggle1 = Section1:CreateToggle("AutoFarm Mobs", nil, function(State)
Settings.Mobs = State

RunService.Stepped:connect(
    function()
        if Settings.Mobs then
            pcall(
                function()
                    Player.Character:WaitForChild("Humanoid"):ChangeState(11)
                    for i, v in pairs(Player.Backpack:GetChildren()) do
                        if v:IsA("Tool") and (v:FindFirstChild("SwordName") and Settings.FightMethod == "Sword" or v.Name == ("Combat") and Settings.FightMethod == "Fist") then
                            Player.Character:FindFirstChildWhichIsA("Humanoid"):EquipTool(v)
                        end 
                    end
                end
            )
        end
    end
)

spawn(
    function()
        while wait() and Settings.Mobs do
            pcall(
                function()
                    Tween(
                        Player.Character.HumanoidRootPart,
                        getNearestMob():GetModelCFrame() * CFrame.new(Vector3.new(0, Settings.Distance, 0)) *
                            CFrame.Angles(-90, 0, 0),
                        300
                    )
                end
            )
        end
    end
)


spawn(function()
    while wait() and Settings.Mobs do 
        pcall(function()
            Click()
        end)
    end 
end)
end)

local Dropdown3 = Section1:CreateDropdown("Mobs", Mobs, function(Name)
    Settings.Mob = Name
end)
local Dropdown3 = Section1:CreateDropdown("Kill Method", {"Fist","Sword"}, function(Name)
    Settings.FightMethod = Name
end)

Dropdown3:SetOption("Fist")
local Slider1 = Section1:CreateSlider("Mob Distance",0,13,Settings.Distance,false, function(Value)
	Settings.Distance = Value
end)


local Dropdown3 = Section1:CreateDropdown("Teleport To Locations", Locations, function(Name)
    for i,v in pairs(Beast) do
        if i == Name then
            Player.Character.HumanoidRootPart.CFrame = CFrame.new(v) 
        end 
    end 
end)

local Dropdown3 = Section1:CreateDropdown("Teleport To NPCS", NPCS, function(Name)
    Player.Character.HumanoidRootPart.CFrame = Workspace[Name]:GetModelCFrame()
 end)

local Toggle1 = Section1:CreateToggle("Rice AutoFarm", Settings.AutoQuest, function(State)
Settings.AutoQuest = State

RunService.Stepped:connect(
    function()
        if Settings.AutoQuest then
            Player.Character:WaitForChild("Humanoid"):ChangeState(11)
        end
    end
)
spawn(
    function()
        while wait() and Settings.AutoQuest do
            pcall(
                function()
                    if not Player.PlayerGui.Menu.Quest.Excess.Visible then
                        Tween(Player.Character.HumanoidRootPart, CFrame.new(-109, 282, -1697), 300)
                        if
                            (Workspace.Sarah.HumanoidRootPart.Position - Player.Character.HumanoidRootPart.Position).magnitude <
                                5 and wait()
                         then
                            game:GetService("VirtualInputManager"):SendKeyEvent(true, "E", false, game) wait(2)
                            Player.PlayerGui.Npc_Dialogue.Button_Clicked:Fire(true)
                        end
                    elseif Player.PlayerGui.Menu.Quest.Excess.Visible then
                        for i, v in pairs(Workspace.StarterVillage_RiceStrings:GetChildren()) do
                            if v:IsA("BasePart") then
                                repeat
                                    wait()
                                    Tween(Player.Character.HumanoidRootPart, CFrame.new(v.Position), 300)
                                    fireproximityprompt(v:FindFirstChildWhichIsA("ProximityPrompt"))
                                until not v or v == nil or not Settings.AutoQuest
                            end
                        end
                    end
                end
            )
        end
    end
)

end)

local Toggle1 = Section1:CreateToggle("Wagon AutoFarm", Settings.AutoQuest1, function(State)
Settings.AutoQuest1 = State

RunService.Stepped:connect(
    function()
        if Settings.AutoQuest1 then
            Player.Character:WaitForChild("Humanoid"):ChangeState(11)
        end
    end
)
spawn(
    function()
        while wait() and Settings.AutoQuest1 do
            pcall(
                function()
                    if not Player.PlayerGui.Menu.Quest.Excess.Visible then
                        Tween(Player.Character.HumanoidRootPart, CFrame.new(223, 283, -1605), 300)
                        if
                            (Workspace["Grandpa Wagwon"].HumanoidRootPart.Position -
                                Player.Character.HumanoidRootPart.Position).magnitude < 5 and wait()
                         then
                            game:GetService("VirtualInputManager"):SendKeyEvent(true, "E", false, game) wait(2)
                            Player.PlayerGui.Npc_Dialogue.Button_Clicked:Fire(true)
                        end
                    elseif Player.PlayerGui.Menu.Quest.Excess.Visible then
                        Tween(Player.Character.HumanoidRootPart, CFrame.new(Workspace.Wagon_Deposit_Part.Position), 300)
                    end
                end
            )
        end
    end
)

end)


local Slider1 = Section1:CreateSlider("Change Player Transparency",0,1,nil,false, function(Value)
	Invis(Value)
end)

local Toggle1 = Section1:CreateToggle("Kill Aura", Settings.Troll, function(State)
Settings.Troll = State
spawn(
    function()
        while wait() and Settings.Troll do
            pcall(function()
                Click()
            end)
        end
    end
)
end)
local Toggle1 = Section1:CreateToggle("Infinite Stamima", Settings.InfiniteStamima, function(State)
Settings.InfiniteStamima = State
spawn(
    function()
        while Settings.InfiniteStamima do
            wait()
            getrenv()._G:AddStamina(9e9)
        end
    end
)

end)
local Toggle1 = Section1:CreateToggle("Infinite Breath", Settings.InfiniteStamima2, function(State)
Settings.InfiniteStamima2 = State
spawn(
    function()
        while Settings.InfiniteStamima2 do
            wait()
            getrenv()._G:AddBreath(9e9)
        end
    end
)

end)



local Toggle1 = Section1:CreateToggle("AutoFish", Settings.AutoFish, function(State)
Settings.AutoFish = State
RunService.Stepped:connect(
    function()
        if Settings.AutoFish then
            Player.Character:WaitForChild("Humanoid"):ChangeState(11)
        end
    end
)
spawn(
    function()
        while wait() and Settings.AutoFish do
            if wait(1) then
                if
                    not Player.Character:FindFirstChild("Fishing Rod") and
                        not Player.Backpack:FindFirstChild("Fishing Rod")
                 then
                    repeat
                        wait()
                        local a =
                            (Vector3.new(-523, 275, -3486) - Player.Character.HumanoidRootPart.Position).magnitude / 300
                        local b = TweenInfo.new(a, Enum.EasingStyle.Linear)
                        local c =
                            game:GetService("TweenService"):Create(
                            Player.Character.HumanoidRootPart,
                            b,
                            {CFrame = CFrame.new(-523, 275, -3486)}
                        )
                        c:Play()
                        c.Completed:Wait()
                        game:GetService("VirtualInputManager"):SendKeyEvent(true, "E", false, game)
                        wait(2)
                        Player.PlayerGui.Npc_Dialogue.Button_Clicked:Fire(true)
                    until Player.Character:FindFirstChild("Fishing Rod") or
                        Player.Backpack:FindFirstChild("Fishing Rod")
                end
                Player.Character.Humanoid:EquipTool(Player.Backpack:FindFirstChild("Fishing Rod"))
                repeat
                    wait()
                until Player.Character:FindFirstChild("Fishing Rod")
                wait(1)
                if Settings.AutoFish then
                    local a =
                        (Vector3.new(678, 274, -2764) - Player.Character.HumanoidRootPart.Position).magnitude / 300
                    local b = TweenInfo.new(a, Enum.EasingStyle.Linear)
                    local c =
                        game:GetService("TweenService"):Create(
                        Player.Character.HumanoidRootPart,
                        b,
                        {CFrame = CFrame.new(678, 274, -2764)}
                    )
                    c:Play()
                    c.Completed:Wait()
                    wait()
                    Player.Character["Fishing Rod"]:Activate()
                    repeat
                        wait()
                    until Player.PlayerGui:FindFirstChild("Fish_Minigame")
                    repeat
                        wait()
                        if Player.PlayerGui:FindFirstChild("Fish_Minigame") then
                            Player.PlayerGui["Fish_Minigame"].Holder.LocalScript.Value.Value = 100
                        end
                    until not Player.PlayerGui:FindFirstChild("Fish_Minigame")
                    wait(2)
                    for d, e in pairs(Debree:GetChildren()) do
                        if e.Name == "Ouwfish" or e.Name == "Ouwfwesh" or e.Name == "Ouwfash" then
                            if (e.Center.Position - Player.Character.HumanoidRootPart.Position).magnitude <= 10 then
                                fireproximityprompt(e.Center.Take_Fish)
                            end
                        end
                    end
                end
            end
        end
    end
)


end)
local Toggle1 = Section1:CreateToggle("Auto Sell All Fish", Settings.AutoSellFish, function(State)
Settings.AutoSellFish = State
spawn(function()
while Settings.AutoSellFish do
    local Values = Player.PlayerGui["Npc_Dialogue"]:FindFirstChild("LocalScript")["Tables_Library"]:FindFirstChild("Sell_Fish")["Fishes_Holder"].Values
    wait()
    if Values.Ouwfish.Value ~= 0 or Values.Ouwfash.Value ~= 0 or Values.Ouwfwesh.Value ~= 0 then
    game.ReplicatedStorage.Remotes.Sell_Fish:InvokeServer(
        Values.Ouwfish.Value,
        Values.Ouwfash.Value,
        Values.Ouwfwesh.Value
    )
    wait(5)
    end
end
end)
end)

local Toggle1 = Section1:CreateToggle("NoSun DMG", Settings.NoSun, function(State)
Settings.NoSun = State
local OldNameCall = nil
OldNameCall = hookmetamethod(game, "__namecall", function(self, ...)
    local Args = {...}
    if  self.Name:find("Sun_Damage")  and Settings.NoSun then
        return wait(math.huge)
    end
    return OldNameCall(self, ...)
end)
end)
local Toggle1 = Section2:CreateToggle("Enable WalkSpeed/JumpPower", Settings.Go, function(State)
Settings.Go = State
RunService.Stepped:connect(
    function()
        if Settings.Go then
            Player.Character:WaitForChild("Humanoid").WalkSpeed = Settings.WalkSpeed
            Player.Character:WaitForChild("Humanoid").JumpPower = Settings.JumpPower
            if not UserInputService.WindowFocusReleased then
                setfpscap(Settings.Fps)
            end
        end
    end
)

end)

local TextBox1 = Section2:CreateTextBox("Fps Cap", "Only numbers", true, function(Value)
    Settings.Fps = Value
end)

local TextBox1 = Section2:CreateTextBox("WalkSpeed", "Only numbers", true, function(Value)
    Settings.WalkSpeed = Value
end)
local TextBox1 = Section2:CreateTextBox("JumpPower", "Only numbers", true, function(Value)
    Settings.JumpPower = Value
end)

local TextBox1 = Section2:CreateTextBox("Seconds Until ServerHop", "Only numbers", true, function(Value)
    Settings.Seconds = Value
end)



local Toggle1 = Section2:CreateToggle("Infinite Jump", Settings.InfiniteJump, function(State)
Settings.InfiniteJump = State
UserInputService.JumpRequest:connect(
    function()
        if Settings.InfiniteJump then
            game:GetService "Players".LocalPlayer.Character:FindFirstChildOfClass "Humanoid":ChangeState("Jumping")
        end
    end
)
end)

local ESP = loadstring(game:HttpGet("https://raw.githubusercontent.com/1201for/V.G-Hub/main/Karrot-Esp"))()
local Toggle1 = Section1:CreateToggle("Enable Esp", Settings.Esp, function(State)
    Settings.Esp = State
    ESP:Toggle(Settings.Esp)
end)
local Toggle1 = Section1:CreateToggle("PLayer Esp", Settings.PlayerEsp, function(State)
    Settings.PlayerEsp = State
    ESP.Players = Settings.PlayerEsp
end)
local Toggle1 = Section1:CreateToggle("Tracers Esp", Settings.Tracers, function(State)
    Settings.Tracers = State
    ESP.Tracers = Settings.Tracers
end)
local Toggle1 = Section1:CreateToggle("Name Esp", Settings.EspNames, function(State)
    ESP.Names = Settings.EspNames
    Settings.EspNames = State
end)
local Toggle1 = Section1:CreateToggle("Boxes Esp", Settings.Boxes, function(State)
    Settings.Boxes = State
    ESP.Boxes = Settings.Boxes
end)

local Toggle1 = Section2:CreateToggle("Invisicam", Settings.Sorry, function(State)
Settings.Sorry = State
if Settings.Sorry then
    Player.DevCameraOcclusionMode = "Invisicam"
else
    Player.DevCameraOcclusionMode = "Zoom"
end
end)


local Toggle1 = Section2:CreateToggle("N Noclip", Settings.Sex1, function(State)
noclips = false
Settings.Sex1 = State
Player:GetMouse().KeyDown:connect(
    function(v)
        if v == "n" then
            if Settings.Sex1 then
                noclips = not noclips
                for i, v in pairs(Player.Character:GetChildren()) do
                    if v:IsA("BasePart") then
                        v.CanCollide = false
                    end
                end
            end
        end
    end
)
RunService.Stepped:connect(
    function()
        if noclips then
            for i, v in pairs(Player.Character:GetChildren()) do
                if v:IsA("BasePart") then
                    v.CanCollide = false
                end
            end
        end
    end
)

end)

local Toggle1 = Section2:CreateToggle("G Noclip", Settings.Sex, function(State)
Settings.Sex = State
noclip = false
RunService.Stepped:connect(
    function()
        if noclip then
            Player.Character.Humanoid:ChangeState(11)
        end
    end
)
mouse = Player:GetMouse()
Player:GetMouse().KeyDown:connect(
    function(v)
        if v == "g" then
            if Settings.Sex then
                noclip = not noclip
                Player.Character.Humanoid:ChangeState(11)
            end
        end
    end
)
end)
local Toggle1 = Section2:CreateToggle("H Fly", Settings.Sex2, function(State)
Settings.Sex2 = State
local Max = 0
local Players = game.Players
local LP = Players.LocalPlayer
local Mouse = LP:GetMouse()
Mouse.KeyDown:connect(
    function(k)
        if k:lower() == "h" then
            Max = Max + 1
            getgenv().Fly = false
            if Settings.Sex2 then
                local T = LP.Character:FindFirstChild("UpperTorso")
                local S = {
                    F = 0,
                    B = 0,
                    L = 0,
                    R = 0
                }
                local S2 = {
                    F = 0,
                    B = 0,
                    L = 0,
                    R = 0
                }
                local SPEED = 5
                local function FLY()
                    getgenv().Fly = true
                    local BodyGyro = Instance.new("BodyGyro", T)
                    local BodyVelocity = Instance.new("BodyVelocity", T)
                    BodyGyro.P = 9e4
                    BodyGyro.maxTorque = Vector3.new(9e9, 9e9, 9e9)
                    BodyGyro.cframe = T.CFrame
                    BodyVelocity.velocity = Vector3.new(0, 0.1, 0)
                    BodyVelocity.maxForce = Vector3.new(9e9, 9e9, 9e9)
                    spawn(
                        function()
                            repeat
                                wait()
                                LP.Character.Humanoid.PlatformStand = false
                                if S.L + S.R ~= 0 or S.F + S.B ~= 0 then
                                    SPEED = 200
                                elseif not (S.L + S.R ~= 0 or S.F + S.B ~= 0) and SPEED ~= 0 then
                                    SPEED = 0
                                end
                                if (S.L + S.R) ~= 0 or (S.F + S.B) ~= 0 then
                                    BodyVelocity.velocity =
                                        ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (S.F + S.B)) +
                                        ((game.Workspace.CurrentCamera.CoordinateFrame *
                                            CFrame.new(S.L + S.R, (S.F + S.B) * 0.2, 0).p) -
                                            game.Workspace.CurrentCamera.CoordinateFrame.p)) *
                                        SPEED
                                    S2 = {
                                        F = S.F,
                                        B = S.B,
                                        L = S.L,
                                        R = S.R
                                    }
                                elseif (S.L + S.R) == 0 and (S.F + S.B) == 0 and SPEED ~= 0 then
                                    BodyVelocity.velocity =
                                        ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (S2.F + S2.B)) +
                                        ((game.Workspace.CurrentCamera.CoordinateFrame *
                                            CFrame.new(S2.L + S2.R, (S2.F + S2.B) * 0.2, 0).p) -
                                            game.Workspace.CurrentCamera.CoordinateFrame.p)) *
                                        SPEED
                                else
                                    BodyVelocity.velocity = Vector3.new(0, 0.1, 0)
                                end
                                BodyGyro.cframe = game.Workspace.CurrentCamera.CoordinateFrame
                            until not getgenv().Fly
                            S = {
                                F = 0,
                                B = 0,
                                L = 0,
                                R = 0
                            }
                            S2 = {
                                F = 0,
                                B = 0,
                                L = 0,
                                R = 0
                            }
                            SPEED = 0
                            BodyGyro:destroy()
                            BodyVelocity:destroy()
                            LP.Character.Humanoid.PlatformStand = false
                        end
                    )
                end
                Mouse.KeyDown:connect(
                    function(k)
                        if k:lower() == "w" then
                            S.F = 1
                        elseif k:lower() == "s" then
                            S.B = -1
                        elseif k:lower() == "a" then
                            S.L = -1
                        elseif k:lower() == "d" then
                            S.R = 1
                        end
                    end
                )
                Mouse.KeyUp:connect(
                    function(k)
                        if k:lower() == "w" then
                            S.F = 0
                        elseif k:lower() == "s" then
                            S.B = 0
                        elseif k:lower() == "a" then
                            S.L = 0
                        elseif k:lower() == "d" then
                            S.R = 0
                        end
                    end
                )
                FLY()
                if Max == 2 then
                    getgenv().Fly = false
                    Max = 0
                end
            end
        end
    end
)
end)
local Toggle1 = Section2:CreateToggle("AutoServerHop", Settings.ServerHop, function(State)
Settings.ServerHop = State
spawn(function()
while Settings.ServerHop do wait(Settings.Seconds)
local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false
local File = pcall(function()
    AllIDs = HttpService:JSONDecode(readfile("NotSameServers.json"))
end)
if not File then
    table.insert(AllIDs, actualHour)
    writefile("NotSameServers.json", HttpService:JSONEncode(AllIDs))
end
function TPReturner()
    local Site;
    if foundAnything == "" then
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
    else
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
    end
    local ID = ""
    if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
        foundAnything = Site.nextPageCursor
    end
    local num = 0;
    for i,v in pairs(Site.data) do
        local Possible = true
        ID = tostring(v.id)
        if tonumber(v.maxPlayers) > tonumber(v.playing) then
            for _,Existing in pairs(AllIDs) do
                if num ~= 0 then
                    if ID == tostring(Existing) then
                        Possible = false
                    end
                else
                    if tonumber(actualHour) ~= tonumber(Existing) then
                        local delFile = pcall(function()
                            delfile("NotSameServers.json")
                            AllIDs = {}
                            table.insert(AllIDs, actualHour)
                        end)
                    end
                end
                num = num + 1
            end
            if Possible == true then
                table.insert(AllIDs, ID)
                wait()
                pcall(function()
                    writefile("NotSameServers.json", HttpService:JSONEncode(AllIDs))
                    wait()
                    game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, Player)
                end)
                wait(4)
            end
        end
    end
end

function Tween()
    while wait() do
        pcall(function()
            TPReturner()
            if foundAnything ~= "" then
                TPReturner()
            end
        end)
    end
end

-- If you'd like to use a script before server hopping (Like a Automatic Chest collector you can put the Tween() after it collected everything.
Tween() 
end 
end)
end)
local Button1 = Section2:CreateButton("Anti Lag", function()
for _, v in pairs(Workspace:GetDescendants()) do
    if v:IsA("BasePart") and not v.Parent:FindFirstChild("Humanoid") then
        v.Material = Enum.Material.SmoothPlastic
        if v:IsA("Texture") then
            v:Destroy()
        end
    end
end
end)

local Button1 = Section2:CreateButton("Teleport to RandomPlayer", function()
local randomPlayer = game.Players:GetPlayers()[math.random(1, #game.Players:GetPlayers())]

Player.Character.HumanoidRootPart.CFrame =
    CFrame.new(
    Vector3.new(
        randomPlayer.Character.Head.Position.X,
        randomPlayer.Character.Head.Position.Y,
        randomPlayer.Character.Head.Position.Z
    )
)
end)
local Button1 = Section2:CreateButton("Lag Switch F3", function()
local ass = false
local bitch = settings()

game:service "UserInputService".InputEnded:connect(
    function(i)
        if i.KeyCode == Enum.KeyCode.F3 then
            ass = not ass
            bitch.Network.IncomingReplicationLag = ass and 10 or 0
        end
    end
)
end) 

local Button1 = Section2:CreateButton("ServerHop", function()
local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false
local File = pcall(function()
    AllIDs = HttpService:JSONDecode(readfile("NotSameServers.json"))
end)
if not File then
    table.insert(AllIDs, actualHour)
    writefile("NotSameServers.json", HttpService:JSONEncode(AllIDs))
end
function TPReturner()
    local Site;
    if foundAnything == "" then
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
    else
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
    end
    local ID = ""
    if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
        foundAnything = Site.nextPageCursor
    end
    local num = 0;
    for i,v in pairs(Site.data) do
        local Possible = true
        ID = tostring(v.id)
        if tonumber(v.maxPlayers) > tonumber(v.playing) then
            for _,Existing in pairs(AllIDs) do
                if num ~= 0 then
                    if ID == tostring(Existing) then
                        Possible = false
                    end
                else
                    if tonumber(actualHour) ~= tonumber(Existing) then
                        local delFile = pcall(function()
                            delfile("NotSameServers.json")
                            AllIDs = {}
                            table.insert(AllIDs, actualHour)
                        end)
                    end
                end
                num = num + 1
            end
            if Possible == true then
                table.insert(AllIDs, ID)
                wait()
                pcall(function()
                    writefile("NotSameServers.json", HttpService:JSONEncode(AllIDs))
                    wait()
                    game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, Player)
                end)
                wait(4)
            end
        end
    end
end

function Tween()
    while wait() do
        pcall(function()
            TPReturner()
            if foundAnything ~= "" then
                TPReturner()
            end
        end)
    end
end

-- If you'd like to use a script before server hopping (Like a Automatic Chest collector you can put the Tween() after it collected everything.
Tween() 
end)
local Button1 = Section2:CreateButton("Rejoin", function()
game:GetService("TeleportService"):Teleport(game.PlaceId, Player) end)


local Button1 = Section2:CreateButton("Save Settings", function()
Save()
end)
local Toggle3 = Section3:CreateToggle("UI Toggle", nil, function(State)
	Window:Toggle(State)
end)
Toggle3:CreateKeybind(tostring(Config.Keybind):gsub("Enum.KeyCode.", ""), function(Key)
	Config.Keybind = Enum.KeyCode[Key]
end)
Toggle3:SetState(true)
Section3:CreateLabel("Credits DekuDimz#7960")
Section3:CreateLabel("Credits AlexR32#3232 Ui")
Section3:CreateLabel("Credits brush#7337")
local Colorpicker3 = Section3:CreateColorpicker("UI Color", function(Color)
	Window:ChangeColor(Color)
end)
Colorpicker3:UpdateColor(Config.Color)

-- credits to jan for patterns
local Dropdown3 = Section4:CreateDropdown("Image", {"Default","Hearts","Abstract","Hexagon","Circles","Lace With Flowers","Floral"}, function(Name)
	if Name == "Default" then
		Window:SetBackground("2151741365")
	elseif Name == "Hearts" then
		Window:SetBackground("6073763717")
	elseif Name == "Abstract" then
		Window:SetBackground("6073743871")
	elseif Name == "Hexagon" then
		Window:SetBackground("6073628839")
	elseif Name == "Circles" then
		Window:SetBackground("6071579801")
	elseif Name == "Lace With Flowers" then
		Window:SetBackground("6071575925")
	elseif Name == "Floral" then
		Window:SetBackground("5553946656")
	end
end)
Dropdown3:SetOption("Default")

local Colorpicker4 = Section4:CreateColorpicker("Color", function(Color)
	Window:SetBackgroundColor(Color)
end)
Colorpicker4:UpdateColor(Color3.new(1,1,1))

local Slider3 = Section4:CreateSlider("Transparency",0,1,nil,false, function(Value)
	Window:SetBackgroundTransparency(Value)
end)
Slider3:SetValue(0)

local Slider4 = Section4:CreateSlider("Tile Scale",0,1,nil,false, function(Value)
	Window:SetTileScale(Value)
end)
Slider4:SetValue(0.5)
